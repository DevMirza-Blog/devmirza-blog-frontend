import { AxiosResponse } from 'axios'
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import qs from 'qs'
import ArticleList from '../components/ArticleList'
import Divider from '../components/Divider'
import Pagination from '../components/Pagination'
import Tabs from '../components/Tabs'
import { fetchArticles, fetchCategories } from '../http'
import {
  IArticle,
  ICategory,
  ICollectionResponse,
  IPagination,
  IQueryOptions,
} from '../types'
import { debounce } from '../utils/index'

/* Defining the props that the component will receive. */
interface IPropTypes {
  categories: {
    items: ICategory[]
  }
  articles: {
    items: IArticle[]
    pagination: IPagination
  }
}

/* A React component. */
const Home: NextPage<IPropTypes> = ({ categories, articles }) => {
  /* A hook that gives you access to the router. */
  const router = useRouter()

  /* Destructuring the pagination object. */
  const { page, pageCount } = articles.pagination

  /**
   * When the user types in the search bar, the search query is passed to the handleSearch function,
   * which then pushes the query to the URL.
   * @param {string} query - string - the search query
   */
  const handleSearch = (query: string) => {
    router.push(`/?search=${query}`)
  }

  return (
    <div>
      <Head>
        <title>DevMirza Blog Homepage</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs
        categories={categories.items}
        handleOnSearch={debounce(handleSearch, 500)}
      />
      <Divider />
      <ArticleList articles={articles.items} />
      <Pagination page={page} pageCount={pageCount} />
    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  /* Defining the options object. */
  const options: Partial<IQueryOptions> = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1,
    },
  }

  /* This is a conditional statement that checks if the query object has a search property. If it does,
  it adds a filter to the options object. */
  if (query.search) {
    options.filters = {
      Title: {
        $containsi: query.search,
      },
    }
  }

  /* Converting the options object into a query string. */
  const queryString = qs.stringify(options)

  /* Destructuring the data property from the AxiosResponse object and assigning it to the articles
  variable. */
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticles(queryString)

  /* Destructuring the data property from the AxiosResponse object and assigning it to the categories
  variable. */
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories()

  /* Returning the props that the component will receive. */
  return {
    props: {
      categories: {
        items: categories.data,
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      },
    },
  }
}

/* Exporting the component. */
export default Home
